"""initial metadata schema creation

Revision ID: 13e014654c46
Revises:
Create Date: 2025-05-05 16:00:17.953051

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "13e014654c46"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS metadata")  # added by fossilfriend
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm")  # added by fossilfriend

    op.create_table(
        "collection",
        sa.Column("collection_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(length=2000), nullable=False),
        sa.Column("tracks_are_sharded", sa.Boolean(), nullable=True),
        sa.Column(
            "data_store",
            sa.Enum(
                "GENOMICS", "FILER", "SHARED", name="trackdatastore", native_enum=False
            ),
            nullable=False,
        ),
        sa.CheckConstraint(
            "data_store in ('GENOMICS', 'FILER', 'SHARED')", name="check_data_store"
        ),
        sa.PrimaryKeyConstraint("collection_id"),
        schema="metadata",
    )
    op.create_index(
        "ix_metadata_collection_data_store",
        "collection",
        ["data_store"],
        unique=False,
        schema="metadata",
        postgresql_include=["name", "description", "tracks_are_sharded"],
    )
    op.create_table(
        "track",
        sa.Column(
            "track_metadata_entry_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("track_id", sa.String(), nullable=False),
        sa.Column(
            "data_store",
            sa.Enum(
                "GENOMICS", "FILER", "SHARED", name="trackdatastore", native_enum=False
            ),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(length=2000), nullable=False),
        sa.Column(
            "genome_build",
            sa.Enum("GRCh37", "GRCh38", name="assembly", native_enum=False),
            nullable=False,
        ),
        sa.Column("feature_type", sa.String(length=50), nullable=False),
        sa.Column("is_download_only", sa.Boolean(), nullable=False),
        sa.Column("searchable_text", sa.TEXT(), nullable=False),
        sa.Column("is_shard", sa.Boolean(), nullable=True),
        sa.Column(
            "shard_chromosome",
            sa.Enum(
                "chr1",
                "chr2",
                "chr3",
                "chr4",
                "chr5",
                "chr6",
                "chr7",
                "chr8",
                "chr9",
                "chr10",
                "chr11",
                "chr12",
                "chr13",
                "chr14",
                "chr15",
                "chr16",
                "chr17",
                "chr18",
                "chr19",
                "chr20",
                "chr21",
                "chr22",
                "chrX",
                "chrY",
                "chrM",
                name="human",
                native_enum=False,
            ),
            nullable=True,
        ),
        sa.Column("shard_root_track_id", sa.String(), nullable=True),
        sa.Column(
            "biosample_characteristics",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "subject_phenotypes", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "experimental_design",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "provenance", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "file_properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.CheckConstraint(
            "data_store in ('GENOMICS', 'FILER', 'SHARED')", name="check_data_store"
        ),
        sa.CheckConstraint(
            "genome_build in ('GRCh37', 'GRCh38', 'hg19', 'hg38')",
            name="check_genome_build",
        ),
        sa.CheckConstraint(
            "shard_chromosome in ('chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM')",
            name="check_shard_chromosome",
        ),
        sa.PrimaryKeyConstraint("track_metadata_entry_id"),
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_data_store"),
        "track",
        ["data_store"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_feature_type"),
        "track",
        ["feature_type"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_genome_build"),
        "track",
        ["genome_build"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_is_download_only"),
        "track",
        ["is_download_only"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        "ix_metadata_track_searchable_text",
        "track",
        ["searchable_text"],
        unique=False,
        schema="metadata",
        postgresql_using="gin",
        postgresql_ops={"searchable_text": "gin_trgm_ops"},
    )
    op.create_index(
        "ix_metadata_track_shard_root_track_id",
        "track",
        ["shard_root_track_id"],
        unique=False,
        schema="metadata",
        postgresql_where=sa.text("shard_root_track_id IS NOT NULL"),
    )
    op.create_index(
        op.f("ix_metadata_track_track_id"),
        "track",
        ["track_id"],
        unique=True,
        schema="metadata",
    )
    op.create_table(
        "trackcollectionlink",
        sa.Column(
            "track_collection_link", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("track_id", sa.String(), nullable=False),
        sa.Column("collection_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["collection_id"],
            ["metadata.collection.collection_id"],
        ),
        sa.ForeignKeyConstraint(
            ["track_id"],
            ["metadata.track.track_id"],
        ),
        sa.PrimaryKeyConstraint("track_collection_link"),
        schema="metadata",
    )
    op.create_index(
        "ix_metadata_trackcollectionlink_collection_id",
        "trackcollectionlink",
        ["collection_id"],
        unique=False,
        schema="metadata",
        postgresql_include=["track_id"],
    )
    op.create_index(
        op.f("ix_metadata_trackcollectionlink_track_id"),
        "trackcollectionlink",
        ["track_id"],
        unique=False,
        schema="metadata",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_metadata_trackcollectionlink_track_id"),
        table_name="trackcollectionlink",
        schema="metadata",
    )
    op.drop_index(
        "ix_metadata_trackcollectionlink_collection_id",
        table_name="trackcollectionlink",
        schema="metadata",
        postgresql_include=["track_id"],
    )
    op.drop_table("trackcollectionlink", schema="metadata")
    op.drop_index(
        op.f("ix_metadata_track_track_id"), table_name="track", schema="metadata"
    )
    op.drop_index(
        "ix_metadata_track_shard_root_track_id",
        table_name="track",
        schema="metadata",
        postgresql_where=sa.text("shard_root_track_id IS NOT NULL"),
    )
    op.drop_index(
        "ix_metadata_track_searchable_text",
        table_name="track",
        schema="metadata",
        postgresql_using="gin",
        postgresql_ops={"searchable_text": "gin_trgm_ops"},
    )
    op.drop_index(
        op.f("ix_metadata_track_is_download_only"),
        table_name="track",
        schema="metadata",
    )
    op.drop_index(
        op.f("ix_metadata_track_genome_build"), table_name="track", schema="metadata"
    )
    op.drop_index(
        op.f("ix_metadata_track_feature_type"), table_name="track", schema="metadata"
    )
    op.drop_index(
        op.f("ix_metadata_track_data_store"), table_name="track", schema="metadata"
    )
    op.drop_table("track", schema="metadata")
    op.drop_index(
        "ix_metadata_collection_data_store",
        table_name="collection",
        schema="metadata",
        postgresql_include=["name", "description", "tracks_are_sharded"],
    )
    op.drop_table("collection", schema="metadata")
    # ### end Alembic commands ###
