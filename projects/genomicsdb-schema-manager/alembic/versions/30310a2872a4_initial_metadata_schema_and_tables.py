"""Initial metadata schema and tables

Revision ID: 30310a2872a4
Revises:
Create Date: 2025-04-30 17:36:26.784147

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "30310a2872a4"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # create schema - added by @fossilfriend
    op.execute("CREATE SCHEMA Metadata")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "track",
        sa.Column(
            "track_metadata_entry_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("track_id", sa.String(), nullable=False),
        sa.Column(
            "data_store",
            sa.Enum(
                "GENOMICS", "FILER", "SHARED", name="trackdatastore", native_enum=False
            ),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(length=2000), nullable=False),
        sa.Column(
            "genome_build",
            sa.Enum("GRCh37", "GRCh38", name="assembly", native_enum=False),
            nullable=False,
        ),
        sa.Column("feature_type", sa.String(length=50), nullable=False),
        sa.Column("is_download_only", sa.Boolean(), nullable=False),
        sa.Column("searchable_text", sa.TEXT(), nullable=False),
        sa.Column("is_shard", sa.Boolean(), nullable=True),
        sa.Column("shard_root_track_id", sa.String(), nullable=True),
        sa.Column(
            "biosample_characteristics",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "subject_phenotypes", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "experimental_design",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "provenance", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "file_properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.CheckConstraint(
            "data_store in ('GENOMICS', 'FILER', 'SHARED')", name="check_data_store"
        ),
        sa.CheckConstraint(
            "genome_build in ('GRCh37', 'GRCh38', 'hg19', 'hg38')",
            name="check_genome_build",
        ),
        sa.PrimaryKeyConstraint("track_metadata_entry_id"),
        schema="metadata",
    )
    op.create_index(
        "idx_track_data_store", "track", ["data_store"], unique=False, schema="metadata"
    )
    op.create_index(
        "idx_track_feature_type",
        "track",
        ["feature_type"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        "idx_track_genome_build",
        "track",
        ["genome_build"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        "idx_track_is_download_only",
        "track",
        ["is_download_only"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        "idx_track_searchable_text",
        "track",
        ["searchable_text"],
        unique=False,
        schema="metadata",
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.create_index(
        "idx_track_shard_root_track_id",
        "track",
        ["shard_root_track_id"],
        unique=False,
        schema="metadata",
        postgresql_where=sa.text("shard_root_track_id IS NOT NULL"),
    )
    op.create_index(
        "idx_track_track_id", "track", ["track_id"], unique=True, schema="metadata"
    )
    op.create_index(
        op.f("ix_metadata_track_data_store"),
        "track",
        ["data_store"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_feature_type"),
        "track",
        ["feature_type"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_genome_build"),
        "track",
        ["genome_build"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_is_download_only"),
        "track",
        ["is_download_only"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_searchable_text"),
        "track",
        ["searchable_text"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_shard_root_track_id"),
        "track",
        ["shard_root_track_id"],
        unique=False,
        schema="metadata",
    )
    op.create_index(
        op.f("ix_metadata_track_track_id"),
        "track",
        ["track_id"],
        unique=True,
        schema="metadata",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_metadata_track_track_id"), table_name="track", schema="metadata"
    )
    op.drop_index(
        op.f("ix_metadata_track_shard_root_track_id"),
        table_name="track",
        schema="metadata",
    )
    op.drop_index(
        op.f("ix_metadata_track_searchable_text"), table_name="track", schema="metadata"
    )
    op.drop_index(
        op.f("ix_metadata_track_is_download_only"),
        table_name="track",
        schema="metadata",
    )
    op.drop_index(
        op.f("ix_metadata_track_genome_build"), table_name="track", schema="metadata"
    )
    op.drop_index(
        op.f("ix_metadata_track_feature_type"), table_name="track", schema="metadata"
    )
    op.drop_index(
        op.f("ix_metadata_track_data_store"), table_name="track", schema="metadata"
    )
    op.drop_index("idx_track_track_id", table_name="track", schema="metadata")
    op.drop_index(
        "idx_track_shard_root_track_id",
        table_name="track",
        schema="metadata",
        postgresql_where=sa.text("shard_root_track_id IS NOT NULL"),
    )
    op.drop_index(
        "idx_track_searchable_text",
        table_name="track",
        schema="metadata",
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.drop_index("idx_track_is_download_only", table_name="track", schema="metadata")
    op.drop_index("idx_track_genome_build", table_name="track", schema="metadata")
    op.drop_index("idx_track_feature_type", table_name="track", schema="metadata")
    op.drop_index("idx_track_data_store", table_name="track", schema="metadata")
    op.drop_table("track", schema="metadata")
    # ### end Alembic commands ###
