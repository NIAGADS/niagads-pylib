<!-- markdownlint-disable -->

<a href="https://github.com/NIAGADS/niagads-pylib/blob/6b54d6b1b836564e79f5cf40afaf3522c3379732/bases/niagads/validate_metadata/core.py"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>

# <kbd>package</kbd> `NIAGADS: jsonschema-metadata-validation`
This package allows the user validate a sample or file manifest metadata file arranged in tabular format (field names in columns, values in rows) against a JSON-Schema file. 

Results are piped to STDOUT unless `--log` option is specified. 

This tool accepts delimited text files (.tab, .txt, .csv) as well as excel (.xls, .xlsx) files. 

The tool can be run as a script (``) or can also be imported as a module.  The module contains the following exported types/members:

 * MetadataValidatorType - enum of types of expected metadata files  
 * initialize_validator - returns an initialized BiosourcePropertiesValidator or FileManifestValidator  
 * get_templated_schema_file - builds schema file name and verifies that file exists  
 * get_templated_metadata_file - builds metadata file name and verifies that file exists  
 * run - initializes a validator and runs the validaton 

---

## Usage



---

## API Reference

## <kbd>function</kbd> `get_templated_schema_file`

```python
get_templated_schema_file(dir: str, template: str) → str
```

verify that a templated schema file `{schemaDir}/{vType}.json` exists 



**Args:**
 
 - <b>`path`</b> (str):  path to directory containing schema file 
 - <b>`template`</b> (str):  template name 



**Raises:**
 
 - <b>`FileExistsError`</b>:  if the schema file does not exist 



**Returns:**
 
 - <b>`str`</b>:  schema file name 


---

## <kbd>function</kbd> `get_templated_metadata_file`

```python
get_templated_metadata_file(
    prefix: str,
    template: str,
    extensions: List[str] = ['xlsx', 'xls', 'txt', 'csv', 'tab']
) → str
```

find metadata file based on templated name `{prefix}{validator_type}.{ext}`



**Args:**
 
 - <b>`path`</b> (str):  file path; may include prefix/file pattern to match (e.g. /files/study1/experiment1-) 
 - <b>`template`</b> (str):  template name 
 - <b>`extensions`</b> (List[str], optional):  allowable file extensions. Defaults to ["xlsx", "xls", "txt", "csv", "tab"]. 



**Raises:**
 
 - <b>`FileNotFoundError`</b>:  if metadata file does not exist 



**Returns:**
 
 - <b>`str`</b>:  metadata file name 


---

## <kbd>function</kbd> `initialize_validator`

```python
initialize_validator(
    file: str,
    schema: str,
    metadataType: MetadataValidatorType,
    idField: str = None
) → Union[BiosourcePropertiesValidator, FileManifestValidator]
```






---

<a href="../../../bases/niagads/metadata_validator_tool/core.py#L130"><img align="right" style="float:right;" src="https://img.shields.io/badge/-source-cccccc?style=flat-square"></a>

## <kbd>function</kbd> `run`

```python
run(
    file: str,
    schema: str,
    metadataType: str,
    idField: str = None,
    failOnError: bool = False
)
```






---

## <kbd>class</kbd> `MetadataValidatorType`
Types of tabular metadata files 







---

_This file was automatically generated via [lazydocs](https://github.com/ml-tooling/lazydocs)._
