# Ensembl GFF3 parser that transforms nested gene structure into a gene model document
# code adapted from solution generated by ChatGPT 5.0,
# see chat log: https://chatgpt.com/share/689f9cb0-6c14-8004-96da-195cbb0e7444

from __future__ import annotations

from typing import Dict, Any, Generator, Optional

from niagads.utils.dict import info_string_to_dict
from niagads.utils.sys import open_file

GFF3_FIELDS = [
    "sequence_id",
    "source",
    "feature_type",
    "start",
    "start",
    "end",
    "score",
    "strand",
    "phase",
    "attributes",
]


def _normalize_chromosome_id(chrom: str) -> str:
    return f"chr{chrom.replace('MT', 'M')}"


def _strip_feature_id_prefix(feature_id: str) -> str:
    return feature_id.split(":")[-1]


def generate_gene_records(gff3_path: str) -> Generator[Gene, None, None]:
    """
    Read an Ensembl GFF3 and yield one record per gene.


    """
    current_gene_document: Optional[Dict[str, Any]] = None

    with open_text_file(gff3_path) as handle:
        for raw_line in handle:
            if not raw_line or raw_line.startswith("#"):
                continue

            (
                sequence_id,
                source_string,
                feature_type_string,
                start_string,
                end_string,
                score_string,
                strand_symbol,
                phase_string,
                attribute_string,
            ) = raw_line.rstrip("\n").split("\t")

            feature_id, parent_id = parse_id_and_parent(attribute_string)

            if feature_type_string == "gene":
                # Emit the previous gene (if any)
                if current_gene_document is not None:
                    yield finalize_gene_document(current_gene_document)

                gene_id = strip_prefix(feature_id) if feature_id else None
                current_gene_document = {
                    "_id": gene_id,
                    "gene_id": gene_id,
                    "chromosome": sequence_id,  # kept exactly as in the file
                    "start": int(start_string),
                    "end": int(end_string),
                    "strand": strand_symbol,
                    "source": None if source_string == "." else source_string,
                }
                continue

            # Ignore lines until we have started a gene block
            if current_gene_document is None:
                continue

            if feature_type_string == "transcript":
                ensure_array(current_gene_document, "transcripts")
                current_gene_document["transcripts"].append(
                    {
                        "id": strip_prefix(feature_id),
                        **build_location(start_string, end_string, strand_symbol),
                        "source": None if source_string == "." else source_string,
                    }
                )
                continue

            # Subfeatures (feature types preserved exactly as in the file)
            subfeature_record = {
                "id": strip_prefix(feature_id),
                "transcript_id": strip_prefix(parent_id) if parent_id else None,
                **build_location(start_string, end_string, strand_symbol),
                "source": None if source_string == "." else source_string,
            }

            if feature_type_string == "exon":
                ensure_array(current_gene_document, "exons")
                current_gene_document["exons"].append(subfeature_record)
            elif feature_type_string == "CDS":
                ensure_array(current_gene_document, "cds")
                current_gene_document["cds"].append(subfeature_record)
            elif feature_type_string == "five_prime_UTR":
                ensure_array(current_gene_document, "five_prime_utrs")
                current_gene_document["five_prime_utrs"].append(subfeature_record)
            elif feature_type_string == "three_prime_UTR":
                ensure_array(current_gene_document, "three_prime_utrs")
                current_gene_document["three_prime_utrs"].append(subfeature_record)
            else:
                ensure_other_features_map(current_gene_document)
                current_gene_document["other_features"].setdefault(
                    feature_type_string, []
                ).append(subfeature_record)

    # Emit the last gene at EOF
    if current_gene_document is not None:
        yield finalize_gene_document(current_gene_document)
